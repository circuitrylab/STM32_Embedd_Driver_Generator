/*!
 * \file embedd_hal.h
 * \brief Provides data types and functions for hardware abstraction
 *
 * Software License Agreement:
 * 
 * This code is generated by the Embedd platform and is free to use, distribute, 
 * and modify by anyone, provided that a reference to the Embedd platform is 
 * included in any distributed or derivative works.
 * 
 * The code is provided "as is" without warranty of any kind, either expressed or 
 * implied, including but not limited to the implied warranties of merchantability 
 * and fitness for a particular purpose.
 * 
 * By using this code, you agree to acknowledge the Embedd platform in your 
 * projects or documentation where this code is utilized.
 * 
 * Â© 2024 Embedd Limited. All Rights Reserved.
 */

#ifndef _SRC_EMBEDD_HAL_H
#define _SRC_EMBEDD_HAL_H

#include <stddef.h>
#include <stdint.h>

#include "embedd_error.h"

struct embedd_device_t;

/*!
 *  \typedef    embedd_bus_type_t
 *  \brief      embedd bus type such as I2C, SPI, UART, etc
 */
typedef enum {
    EMBEDD_BUS_TYPE_NA      = 0,
    EMBEDD_BUS_TYPE_I2C,
    EMBEDD_BUS_TYPE_SPI
} embedd_bus_type_t;

/*!
 *  \struct     embedd_bus_dev_cfg_t
 *  \brief      conficurations related to a bus the device is on
 *
 *  \param      bus_type     type of the bus use by a device
 *  \param      configs      pointer to the device configurations
 */
typedef struct {
    uint16_t bus_type;
    void *configs;
} embedd_bus_dev_cfg_t;

/*!
 *  \struct     embedd_bus_transfer_t
 *  \brief      structure of bus transfer operation
 *
 *  \param      tx_buf     Pointer to the buffer containing data to be transmitted
 *  \param      tx_len     Length of Tx buffer
 *  \param      rx_buf     Pointer to the buffer in which the data is going to be received
 *  \param      rx_len     Length of Rx buffer
 *  \param      delay      Delay between Tx and Rx operation
 */
typedef struct {
    uint8_t *tx_buf;
    uint32_t tx_len;
    uint8_t *rx_buf;
    uint32_t rx_len;
    uint32_t delay;
} embedd_bus_transfer_t;

/*!
 *  \struct     embedd_bus_t
 *  \brief      bus structure
 *
 *  \param      name      name of bus
 *  \param      instance  pointer to the bus object which is specific for user library
 *  \param      write     pointer to bus write function
 *  \param      read      pointer to bus read function
 */
typedef struct embedd_bus_t {
    const char *name;
    void *instance;
    EMBEDD_RESULT (*write)(const struct embedd_device_t *dev, const uint8_t *data_ptr, uint32_t data_size);
    EMBEDD_RESULT (*read)(const struct embedd_device_t *dev, uint8_t *data_ptr, uint32_t data_size);
    EMBEDD_RESULT (*transfer)(const struct embedd_device_t *dev, embedd_bus_transfer_t *transfer);
} embedd_bus_t;

/*!
 *  \fn       embedd_hal_sleep
 *  \brief    read data to bus device
 *
 *  \param    mseconds  time in ms of sleep
 */
void embedd_hal_sleep(uint32_t mseconds);

#endif  //_SRC_EMBEDD_HAL_H
