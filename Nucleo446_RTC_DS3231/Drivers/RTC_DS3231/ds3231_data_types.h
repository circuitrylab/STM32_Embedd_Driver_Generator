/*!
 * \file ds3231_data_types.h
 * \brief Clocks data types.
 *
 * This file contains all the information about Clocks specific data types.
 *
 * Software License Agreement:
 * 
 * This code is generated by the Embedd platform and is free to use, distribute, 
 * and modify by anyone, provided that a reference to the Embedd platform is 
 * included in any distributed or derivative works.
 * 
 * The code is provided "as is" without warranty of any kind, either expressed or 
 * implied, including but not limited to the implied warranties of merchantability 
 * and fitness for a particular purpose.
 * 
 * By using this code, you agree to acknowledge the Embedd platform in your 
 * projects or documentation where this code is utilized.
 * 
 * Â© 2024 Embedd Limited. All Rights Reserved.
 */

#ifndef _SRC_DS3231_DATA_TYPES_H
#define _SRC_DS3231_DATA_TYPES_H

#include <stdint.h>
#include "embedd_device.h"
#include "embedd_hal.h"

/* --------------------------------------------------------------------------
 * DATA type
 * ------------------------------------------------------------------------*/
#pragma pack(push, 1)


/*!
 * \struct ds3231_seconds_t
 * \brief 
 *
 * \var seconds This field holds the seconds value in BCD format.
 * \var reserved_7 Reserved bit, should be set to 0.
 */
typedef struct {
  uint8_t seconds:7;
  uint8_t reserved_7:1;
} ds3231_seconds_t;

/*!
 * \def DS3231_SECONDS_SECONDS_SECONDS_VALUE_IN_BCD_FORMAT
 * \brief This field holds the seconds value in BCD format.
*/
#define DS3231_SECONDS_SECONDS_SECONDS_VALUE_IN_BCD_FORMAT 89


/*!
 * \macro DS3231_SECONDS_SECONDS_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_seconds_t_seconds type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_SECONDS_SECONDS_VALID(val) (\
  (val) == DS3231_SECONDS_SECONDS_SECONDS_VALUE_IN_BCD_FORMAT ||\
  0)

/*!
 * \def DS3231_SECONDS_RESERVED_7_RESERVED
 * \brief Reserved bit, should be set to 0.
*/
#define DS3231_SECONDS_RESERVED_7_RESERVED 0


/*!
 * \macro DS3231_SECONDS_RESERVED_7_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_seconds_t_reserved_7 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_SECONDS_RESERVED_7_VALID(val) (\
  (val) == DS3231_SECONDS_RESERVED_7_RESERVED ||\
  0)

/*!
 * \struct ds3231_minutes_t
 * \brief 
 *
 * \var minutes Represents the minutes value in BCD format.
 * \var reserved_7 Reserved bit, should be set to 0.
 */
typedef struct {
  uint8_t minutes:7;
  uint8_t reserved_7:1;
} ds3231_minutes_t;

/*!
 * \def DS3231_MINUTES_MINUTES_VALID_RANGE_FOR_MINUTES
 * \brief Represents the minutes value in BCD format.
*/
#define DS3231_MINUTES_MINUTES_VALID_RANGE_FOR_MINUTES 89


/*!
 * \macro DS3231_MINUTES_MINUTES_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_minutes_t_minutes type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MINUTES_MINUTES_VALID(val) (\
  (val) == DS3231_MINUTES_MINUTES_VALID_RANGE_FOR_MINUTES ||\
  0)

/*!
 * \def DS3231_MINUTES_RESERVED_7_RESERVED
 * \brief Reserved bit, should be set to 0.
*/
#define DS3231_MINUTES_RESERVED_7_RESERVED 0


/*!
 * \macro DS3231_MINUTES_RESERVED_7_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_minutes_t_reserved_7 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MINUTES_RESERVED_7_VALID(val) (\
  (val) == DS3231_MINUTES_RESERVED_7_RESERVED ||\
  0)

/*!
 * \struct ds3231_hour_t
 * \brief 
 *
 * \var hour Hour value in BCD format
 * \var 10_hour 10-hour mode bit
 * \var 20_hour 20-hour mode bit
 * \var reserved_6 Reserved field as space was unfilled
 */
typedef struct {
  uint8_t hour:4;
  uint8_t _10_hour:1;
  uint8_t _20_hour:1;
  uint8_t reserved_6:2;
} ds3231_hour_t;

/*!
 * \def DS3231_HOUR_HOUR_0
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_0 0

/*!
 * \def DS3231_HOUR_HOUR_1
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_1 1

/*!
 * \def DS3231_HOUR_HOUR_10
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_10 10

/*!
 * \def DS3231_HOUR_HOUR_11
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_11 11

/*!
 * \def DS3231_HOUR_HOUR_4
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_4 4

/*!
 * \def DS3231_HOUR_HOUR_5
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_5 5

/*!
 * \def DS3231_HOUR_HOUR_6
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_6 6

/*!
 * \def DS3231_HOUR_HOUR_7
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_7 7

/*!
 * \def DS3231_HOUR_HOUR_8
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_8 8

/*!
 * \def DS3231_HOUR_HOUR_9
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_9 9

/*!
 * \def DS3231_HOUR_HOUR_12
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_12 12

/*!
 * \def DS3231_HOUR_HOUR_13
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_13 13

/*!
 * \def DS3231_HOUR_HOUR_14
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_14 14

/*!
 * \def DS3231_HOUR_HOUR_15
 * \brief Hour value in BCD format.
*/
#define DS3231_HOUR_HOUR_15 15


/*!
 * \macro DS3231_HOUR_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_hour_t_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_HOUR_HOUR_VALID(val) (\
  (val) == DS3231_HOUR_HOUR_0 ||\
  (val) == DS3231_HOUR_HOUR_1 ||\
  (val) == DS3231_HOUR_HOUR_10 ||\
  (val) == DS3231_HOUR_HOUR_11 ||\
  (val) == DS3231_HOUR_HOUR_4 ||\
  (val) == DS3231_HOUR_HOUR_5 ||\
  (val) == DS3231_HOUR_HOUR_6 ||\
  (val) == DS3231_HOUR_HOUR_7 ||\
  (val) == DS3231_HOUR_HOUR_8 ||\
  (val) == DS3231_HOUR_HOUR_9 ||\
  (val) == DS3231_HOUR_HOUR_12 ||\
  (val) == DS3231_HOUR_HOUR_13 ||\
  (val) == DS3231_HOUR_HOUR_14 ||\
  (val) == DS3231_HOUR_HOUR_15 ||\
  0)

/*!
 * \def DS3231_HOUR_10_HOUR_0
 * \brief 10-hour mode bit.
*/
#define DS3231_HOUR_10_HOUR_0 0

/*!
 * \def DS3231_HOUR_10_HOUR_1
 * \brief 10-hour mode bit.
*/
#define DS3231_HOUR_10_HOUR_1 1


/*!
 * \macro DS3231_HOUR_10_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_hour_t_10_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_HOUR_10_HOUR_VALID(val) (\
  (val) == DS3231_HOUR_10_HOUR_0 ||\
  (val) == DS3231_HOUR_10_HOUR_1 ||\
  0)

/*!
 * \def DS3231_HOUR_20_HOUR_AM
 * \brief 20-hour mode bit.
*/
#define DS3231_HOUR_20_HOUR_AM 0

/*!
 * \def DS3231_HOUR_20_HOUR_PM
 * \brief 20-hour mode bit.
*/
#define DS3231_HOUR_20_HOUR_PM 1


/*!
 * \macro DS3231_HOUR_20_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_hour_t_20_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_HOUR_20_HOUR_VALID(val) (\
  (val) == DS3231_HOUR_20_HOUR_AM ||\
  (val) == DS3231_HOUR_20_HOUR_PM ||\
  0)

/*!
 * \struct ds3231_day_t
 * \brief 
 *
 * \var day Day of the week
 * \var reserved_3 Reserved bits
 */
typedef struct {
  uint8_t day:3;
  uint8_t reserved_3:5;
} ds3231_day_t;

/*!
 * \def DS3231_DAY_DAY_SUNDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_SUNDAY 0

/*!
 * \def DS3231_DAY_DAY_MONDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_MONDAY 1

/*!
 * \def DS3231_DAY_DAY_TUESDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_TUESDAY 2

/*!
 * \def DS3231_DAY_DAY_WEDNESDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_WEDNESDAY 3

/*!
 * \def DS3231_DAY_DAY_THURSDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_THURSDAY 4

/*!
 * \def DS3231_DAY_DAY_FRIDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_FRIDAY 5

/*!
 * \def DS3231_DAY_DAY_SATURDAY
 * \brief Day of the week.
*/
#define DS3231_DAY_DAY_SATURDAY 6


/*!
 * \macro DS3231_DAY_DAY_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_day_t_day type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_DAY_DAY_VALID(val) (\
  (val) == DS3231_DAY_DAY_SUNDAY ||\
  (val) == DS3231_DAY_DAY_MONDAY ||\
  (val) == DS3231_DAY_DAY_TUESDAY ||\
  (val) == DS3231_DAY_DAY_WEDNESDAY ||\
  (val) == DS3231_DAY_DAY_THURSDAY ||\
  (val) == DS3231_DAY_DAY_FRIDAY ||\
  (val) == DS3231_DAY_DAY_SATURDAY ||\
  0)

/*!
 * \struct ds3231_date_t
 * \brief 
 *
 * \var date Units place of the date
 * \var 10_date Tens place of the date
 * \var rsv Reserved bits
 */
typedef struct {
  uint8_t date:4;
  uint8_t _10_date:2;
  uint8_t rsv:2;
} ds3231_date_t;

/*!
 * \def DS3231_DATE_DATE_0
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_0 0

/*!
 * \def DS3231_DATE_DATE_1
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_1 1

/*!
 * \def DS3231_DATE_DATE_2
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_2 10

/*!
 * \def DS3231_DATE_DATE_3
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_3 11

/*!
 * \def DS3231_DATE_DATE_4
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_4 4

/*!
 * \def DS3231_DATE_DATE_5
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_5 5

/*!
 * \def DS3231_DATE_DATE_6
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_6 6

/*!
 * \def DS3231_DATE_DATE_7
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_7 7

/*!
 * \def DS3231_DATE_DATE_8
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_8 8

/*!
 * \def DS3231_DATE_DATE_9
 * \brief Units place of the date.
*/
#define DS3231_DATE_DATE_9 9


/*!
 * \macro DS3231_DATE_DATE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_date_t_date type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_DATE_DATE_VALID(val) (\
  (val) == DS3231_DATE_DATE_0 ||\
  (val) == DS3231_DATE_DATE_1 ||\
  (val) == DS3231_DATE_DATE_2 ||\
  (val) == DS3231_DATE_DATE_3 ||\
  (val) == DS3231_DATE_DATE_4 ||\
  (val) == DS3231_DATE_DATE_5 ||\
  (val) == DS3231_DATE_DATE_6 ||\
  (val) == DS3231_DATE_DATE_7 ||\
  (val) == DS3231_DATE_DATE_8 ||\
  (val) == DS3231_DATE_DATE_9 ||\
  0)

/*!
 * \def DS3231_DATE_10_DATE_0
 * \brief Tens place of the date.
*/
#define DS3231_DATE_10_DATE_0 0

/*!
 * \def DS3231_DATE_10_DATE_1
 * \brief Tens place of the date.
*/
#define DS3231_DATE_10_DATE_1 1

/*!
 * \def DS3231_DATE_10_DATE_2
 * \brief Tens place of the date.
*/
#define DS3231_DATE_10_DATE_2 2

/*!
 * \def DS3231_DATE_10_DATE_3
 * \brief Tens place of the date.
*/
#define DS3231_DATE_10_DATE_3 3


/*!
 * \macro DS3231_DATE_10_DATE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_date_t_10_date type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_DATE_10_DATE_VALID(val) (\
  (val) == DS3231_DATE_10_DATE_0 ||\
  (val) == DS3231_DATE_10_DATE_1 ||\
  (val) == DS3231_DATE_10_DATE_2 ||\
  (val) == DS3231_DATE_10_DATE_3 ||\
  0)

/*!
 * \def DS3231_DATE_RSV_RESERVED
 * \brief Reserved bits.
*/
#define DS3231_DATE_RSV_RESERVED 0


/*!
 * \macro DS3231_DATE_RSV_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_date_t_rsv type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_DATE_RSV_VALID(val) (\
  (val) == DS3231_DATE_RSV_RESERVED ||\
  0)

/*!
 * \struct ds3231_monthcentury_t
 * \brief 
 *
 * \var month This field holds the month value.
 * \var reserved_4 Reserved bits.
 * \var century This bit toggles when the years register overflows from 99 to 00.
 */
typedef struct {
  uint8_t month:4;
  uint8_t reserved_4:3;
  uint8_t century:1;
} ds3231_monthcentury_t;

/*!
 * \def DS3231_MONTHCENTURY_MONTH_JANUARY
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_JANUARY 1

/*!
 * \def DS3231_MONTHCENTURY_MONTH_OCTOBER
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_OCTOBER 2

/*!
 * \def DS3231_MONTHCENTURY_MONTH_NOVEMBER
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_NOVEMBER 3

/*!
 * \def DS3231_MONTHCENTURY_MONTH_APRIL
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_APRIL 4

/*!
 * \def DS3231_MONTHCENTURY_MONTH_MAY
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_MAY 5

/*!
 * \def DS3231_MONTHCENTURY_MONTH_JUNE
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_JUNE 6

/*!
 * \def DS3231_MONTHCENTURY_MONTH_JULY
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_JULY 7

/*!
 * \def DS3231_MONTHCENTURY_MONTH_AUGUST
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_AUGUST 8

/*!
 * \def DS3231_MONTHCENTURY_MONTH_SEPTEMBER
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_SEPTEMBER 9

/*!
 * \def DS3231_MONTHCENTURY_MONTH_DECEMBER
 * \brief This field holds the month value.
*/
#define DS3231_MONTHCENTURY_MONTH_DECEMBER 18


/*!
 * \macro DS3231_MONTHCENTURY_MONTH_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_monthcentury_t_month type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MONTHCENTURY_MONTH_VALID(val) (\
  (val) == DS3231_MONTHCENTURY_MONTH_JANUARY ||\
  (val) == DS3231_MONTHCENTURY_MONTH_OCTOBER ||\
  (val) == DS3231_MONTHCENTURY_MONTH_NOVEMBER ||\
  (val) == DS3231_MONTHCENTURY_MONTH_APRIL ||\
  (val) == DS3231_MONTHCENTURY_MONTH_MAY ||\
  (val) == DS3231_MONTHCENTURY_MONTH_JUNE ||\
  (val) == DS3231_MONTHCENTURY_MONTH_JULY ||\
  (val) == DS3231_MONTHCENTURY_MONTH_AUGUST ||\
  (val) == DS3231_MONTHCENTURY_MONTH_SEPTEMBER ||\
  (val) == DS3231_MONTHCENTURY_MONTH_DECEMBER ||\
  0)

/*!
 * \def DS3231_MONTHCENTURY_RESERVED_4_RESERVED
 * \brief Reserved bits.
*/
#define DS3231_MONTHCENTURY_RESERVED_4_RESERVED 0


/*!
 * \macro DS3231_MONTHCENTURY_RESERVED_4_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_monthcentury_t_reserved_4 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MONTHCENTURY_RESERVED_4_VALID(val) (\
  (val) == DS3231_MONTHCENTURY_RESERVED_4_RESERVED ||\
  0)

/*!
 * \def DS3231_MONTHCENTURY_CENTURY_CURRENT_CENTURY
 * \brief This bit toggles when the years register overflows from 99 to 00.
*/
#define DS3231_MONTHCENTURY_CENTURY_CURRENT_CENTURY 0

/*!
 * \def DS3231_MONTHCENTURY_CENTURY_NEXT_CENTURY
 * \brief This bit toggles when the years register overflows from 99 to 00.
*/
#define DS3231_MONTHCENTURY_CENTURY_NEXT_CENTURY 1


/*!
 * \macro DS3231_MONTHCENTURY_CENTURY_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_monthcentury_t_century type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MONTHCENTURY_CENTURY_VALID(val) (\
  (val) == DS3231_MONTHCENTURY_CENTURY_CURRENT_CENTURY ||\
  (val) == DS3231_MONTHCENTURY_CENTURY_NEXT_CENTURY ||\
  0)

/*!
 * \struct ds3231_year_t
 * \brief 
 *
 * \var year Represents the year in BCD format.
 * \var reserved_7 Reserved bit, should be set to 0.
 */
typedef struct {
  uint8_t year:7;
  uint8_t reserved_7:1;
} ds3231_year_t;

/*!
 * \def DS3231_YEAR_YEAR_YEAR_VALUE_IN_BCD_FORMAT_0099
 * \brief Represents the year in BCD format.
*/
#define DS3231_YEAR_YEAR_YEAR_VALUE_IN_BCD_FORMAT_0099 153


/*!
 * \macro DS3231_YEAR_YEAR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_year_t_year type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_YEAR_YEAR_VALID(val) (\
  (val) == DS3231_YEAR_YEAR_YEAR_VALUE_IN_BCD_FORMAT_0099 ||\
  0)

/*!
 * \def DS3231_YEAR_RESERVED_7_RESERVED
 * \brief Reserved bit, should be set to 0.
*/
#define DS3231_YEAR_RESERVED_7_RESERVED 0


/*!
 * \macro DS3231_YEAR_RESERVED_7_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_year_t_reserved_7 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_YEAR_RESERVED_7_VALID(val) (\
  (val) == DS3231_YEAR_RESERVED_7_RESERVED ||\
  0)

/*!
 * \struct ds3231_alarm_1_seconds_t
 * \brief 
 *
 * \var seconds Units place of the seconds value
 * \var 10_seconds Tens place of the seconds value
 * \var a1m1 Alarm 1 mask bit 1
 */
typedef struct {
  uint8_t seconds:4;
  uint8_t _10_seconds:3;
  uint8_t a1m1:1;
} ds3231_alarm_1_seconds_t;

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_0
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_0 0

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_1
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_1 1

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_2
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_2 10

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_3
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_3 11

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_4
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_4 4

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_5
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_5 5

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_6
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_6 6

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_7
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_7 7

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_8
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_8 8

/*!
 * \def DS3231_ALARM_1_SECONDS_SECONDS_9
 * \brief Units place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_SECONDS_9 9


/*!
 * \macro DS3231_ALARM_1_SECONDS_SECONDS_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_seconds_t_seconds type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_SECONDS_SECONDS_VALID(val) (\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_0 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_1 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_2 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_3 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_4 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_5 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_6 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_7 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_8 ||\
  (val) == DS3231_ALARM_1_SECONDS_SECONDS_9 ||\
  0)

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_0
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_0 0

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_10
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_10 1

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_20
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_20 2

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_30
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_30 3

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_40
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_40 4

/*!
 * \def DS3231_ALARM_1_SECONDS_10_SECONDS_50
 * \brief Tens place of the seconds value.
*/
#define DS3231_ALARM_1_SECONDS_10_SECONDS_50 5


/*!
 * \macro DS3231_ALARM_1_SECONDS_10_SECONDS_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_seconds_t_10_seconds type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_SECONDS_10_SECONDS_VALID(val) (\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_0 ||\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_10 ||\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_20 ||\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_30 ||\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_40 ||\
  (val) == DS3231_ALARM_1_SECONDS_10_SECONDS_50 ||\
  0)

/*!
 * \def DS3231_ALARM_1_SECONDS_A1M1_ALARM_WHEN_SECONDS_MATCH
 * \brief Alarm 1 mask bit 1.
*/
#define DS3231_ALARM_1_SECONDS_A1M1_ALARM_WHEN_SECONDS_MATCH 0

/*!
 * \def DS3231_ALARM_1_SECONDS_A1M1_ALARM_ONCE_PER_SECOND
 * \brief Alarm 1 mask bit 1.
*/
#define DS3231_ALARM_1_SECONDS_A1M1_ALARM_ONCE_PER_SECOND 1


/*!
 * \macro DS3231_ALARM_1_SECONDS_A1M1_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_seconds_t_a1m1 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_SECONDS_A1M1_VALID(val) (\
  (val) == DS3231_ALARM_1_SECONDS_A1M1_ALARM_WHEN_SECONDS_MATCH ||\
  (val) == DS3231_ALARM_1_SECONDS_A1M1_ALARM_ONCE_PER_SECOND ||\
  0)

/*!
 * \struct ds3231_alarm_1_minutes_t
 * \brief 
 *
 * \var minutes Alarm 1 Minutes value
 * \var a1m2 Alarm 1 Minutes Mask bit
 */
typedef struct {
  uint8_t minutes:7;
  uint8_t a1m2:1;
} ds3231_alarm_1_minutes_t;

/*!
 * \def DS3231_ALARM_1_MINUTES_MINUTES_MINUTES_VALUE
 * \brief Alarm 1 Minutes value.
*/
#define DS3231_ALARM_1_MINUTES_MINUTES_MINUTES_VALUE 89


/*!
 * \macro DS3231_ALARM_1_MINUTES_MINUTES_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_minutes_t_minutes type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_MINUTES_MINUTES_VALID(val) (\
  (val) == DS3231_ALARM_1_MINUTES_MINUTES_MINUTES_VALUE ||\
  0)

/*!
 * \def DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_MATCH
 * \brief Alarm 1 Minutes Mask bit.
*/
#define DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_MATCH 0

/*!
 * \def DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_DO_NOT_MATCH
 * \brief Alarm 1 Minutes Mask bit.
*/
#define DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_DO_NOT_MATCH 1


/*!
 * \macro DS3231_ALARM_1_MINUTES_A1M2_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_minutes_t_a1m2 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_MINUTES_A1M2_VALID(val) (\
  (val) == DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_MATCH ||\
  (val) == DS3231_ALARM_1_MINUTES_A1M2_ALARM_WHEN_MINUTES_DO_NOT_MATCH ||\
  0)

/*!
 * \struct ds3231_alarm_1_hour_t
 * \brief 
 *
 * \var hour Hour value
 * \var 10_hour 10-hour digit in 24-hour mode
 * \var ampm AM/PM indicator in 12-hour mode
 * \var 1224 12-hour or 24-hour mode select
 * \var a1m3 Alarm 1 mask bit 3
 */
typedef struct {
  uint8_t hour:4;
  uint8_t _10_hour:1;
  uint8_t ampm:1;
  uint8_t _1224:1;
  uint8_t a1m3:1;
} ds3231_alarm_1_hour_t;

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_0
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_0 0

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_1
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_1 1

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_10
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_10 10

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_11
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_11 11

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_4
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_4 4

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_5
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_5 5

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_6
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_6 6

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_7
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_7 7

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_8
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_8 8

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_9
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_9 9

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_12
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_12 12

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_13
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_13 13

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_14
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_14 14

/*!
 * \def DS3231_ALARM_1_HOUR_HOUR_15
 * \brief Hour value.
*/
#define DS3231_ALARM_1_HOUR_HOUR_15 15


/*!
 * \macro DS3231_ALARM_1_HOUR_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_hour_t_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_HOUR_HOUR_VALID(val) (\
  (val) == DS3231_ALARM_1_HOUR_HOUR_0 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_1 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_10 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_11 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_4 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_5 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_6 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_7 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_8 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_9 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_12 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_13 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_14 ||\
  (val) == DS3231_ALARM_1_HOUR_HOUR_15 ||\
  0)

/*!
 * \def DS3231_ALARM_1_HOUR_10_HOUR_0
 * \brief 10-hour digit in 24-hour mode.
*/
#define DS3231_ALARM_1_HOUR_10_HOUR_0 0

/*!
 * \def DS3231_ALARM_1_HOUR_10_HOUR_2
 * \brief 10-hour digit in 24-hour mode.
*/
#define DS3231_ALARM_1_HOUR_10_HOUR_2 1


/*!
 * \macro DS3231_ALARM_1_HOUR_10_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_hour_t_10_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_HOUR_10_HOUR_VALID(val) (\
  (val) == DS3231_ALARM_1_HOUR_10_HOUR_0 ||\
  (val) == DS3231_ALARM_1_HOUR_10_HOUR_2 ||\
  0)

/*!
 * \def DS3231_ALARM_1_HOUR_AMPM_AM
 * \brief AM/PM indicator in 12-hour mode.
*/
#define DS3231_ALARM_1_HOUR_AMPM_AM 0

/*!
 * \def DS3231_ALARM_1_HOUR_AMPM_PM
 * \brief AM/PM indicator in 12-hour mode.
*/
#define DS3231_ALARM_1_HOUR_AMPM_PM 1


/*!
 * \macro DS3231_ALARM_1_HOUR_AMPM_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_hour_t_ampm type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_HOUR_AMPM_VALID(val) (\
  (val) == DS3231_ALARM_1_HOUR_AMPM_AM ||\
  (val) == DS3231_ALARM_1_HOUR_AMPM_PM ||\
  0)

/*!
 * \def DS3231_ALARM_1_HOUR_1224_24HOUR_MODE
 * \brief 12-hour or 24-hour mode select.
*/
#define DS3231_ALARM_1_HOUR_1224_24HOUR_MODE 0

/*!
 * \def DS3231_ALARM_1_HOUR_1224_12HOUR_MODE
 * \brief 12-hour or 24-hour mode select.
*/
#define DS3231_ALARM_1_HOUR_1224_12HOUR_MODE 1


/*!
 * \macro DS3231_ALARM_1_HOUR_1224_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_hour_t_1224 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_HOUR_1224_VALID(val) (\
  (val) == DS3231_ALARM_1_HOUR_1224_24HOUR_MODE ||\
  (val) == DS3231_ALARM_1_HOUR_1224_12HOUR_MODE ||\
  0)

/*!
 * \def DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_MATCH
 * \brief Alarm 1 mask bit 3.
*/
#define DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_MATCH 0

/*!
 * \def DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_AND_MINUTES_MATCH
 * \brief Alarm 1 mask bit 3.
*/
#define DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_AND_MINUTES_MATCH 1


/*!
 * \macro DS3231_ALARM_1_HOUR_A1M3_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_hour_t_a1m3 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_HOUR_A1M3_VALID(val) (\
  (val) == DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_MATCH ||\
  (val) == DS3231_ALARM_1_HOUR_A1M3_ALARM_WHEN_HOURS_AND_MINUTES_MATCH ||\
  0)

/*!
 * \struct ds3231_alarm_1_daydate_t
 * \brief 
 *
 * \var 10_date Stores the day/date value for the alarm.
 * \var dydt Controls whether the alarm value stored in bits 0 to 5 of the register reflects the day of the week or the date of the month.
 * \var reserved_7 Reserved field as space was unfilled
 */
typedef struct {
  uint8_t _10_date:6;
  uint8_t dydt:1;
  uint8_t reserved_7:1;
} ds3231_alarm_1_daydate_t;

/*!
 * \def DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_MONTH
 * \brief Stores the day/date value for the alarm.
*/
#define DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_MONTH 49

/*!
 * \def DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_WEEK
 * \brief Stores the day/date value for the alarm.
*/
#define DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_WEEK 23


/*!
 * \macro DS3231_ALARM_1_DAYDATE_10_DATE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_daydate_t_10_date type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_DAYDATE_10_DATE_VALID(val) (\
  (val) == DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_MONTH ||\
  (val) == DS3231_ALARM_1_DAYDATE_10_DATE_DAY_OF_THE_WEEK ||\
  0)

/*!
 * \def DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAYDATE_MATCH
 * \brief Controls whether the alarm value stored in bits 0 to 5 of the register reflects the day of the week or the date of the month.
*/
#define DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAYDATE_MATCH 0

/*!
 * \def DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH
 * \brief Controls whether the alarm value stored in bits 0 to 5 of the register reflects the day of the week or the date of the month.
*/
#define DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH 1


/*!
 * \macro DS3231_ALARM_1_DAYDATE_DYDT_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_1_daydate_t_dydt type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_1_DAYDATE_DYDT_VALID(val) (\
  (val) == DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAYDATE_MATCH ||\
  (val) == DS3231_ALARM_1_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH ||\
  0)

/*!
 * \struct ds3231_alarm_2_minutes_t
 * \brief 
 *
 * \var minutes Alarm 2 Minutes
 * \var a2m2 Alarm 2 Mask Bit
 */
typedef struct {
  uint8_t minutes:7;
  uint8_t a2m2:1;
} ds3231_alarm_2_minutes_t;

/*!
 * \def DS3231_ALARM_2_MINUTES_MINUTES_MINUTES
 * \brief Alarm 2 Minutes.
*/
#define DS3231_ALARM_2_MINUTES_MINUTES_MINUTES 89


/*!
 * \macro DS3231_ALARM_2_MINUTES_MINUTES_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_minutes_t_minutes type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_MINUTES_MINUTES_VALID(val) (\
  (val) == DS3231_ALARM_2_MINUTES_MINUTES_MINUTES ||\
  0)

/*!
 * \def DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_MATCH
 * \brief Alarm 2 Mask Bit.
*/
#define DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_MATCH 0

/*!
 * \def DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_AND_SECONDS_MATCH
 * \brief Alarm 2 Mask Bit.
*/
#define DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_AND_SECONDS_MATCH 1


/*!
 * \macro DS3231_ALARM_2_MINUTES_A2M2_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_minutes_t_a2m2 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_MINUTES_A2M2_VALID(val) (\
  (val) == DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_MATCH ||\
  (val) == DS3231_ALARM_2_MINUTES_A2M2_ALARM_WHEN_MINUTES_AND_SECONDS_MATCH ||\
  0)

/*!
 * \struct ds3231_alarm_2_hour_t
 * \brief 
 *
 * \var hour Hour value
 * \var ampm AM/PM bit in 12-hour mode
 * \var 1224 12-hour or 24-hour mode select bit
 * \var a2m3 Alarm 2 Mask bit 3
 */
typedef struct {
  uint8_t hour:5;
  uint8_t ampm:1;
  uint8_t _1224:1;
  uint8_t a2m3:1;
} ds3231_alarm_2_hour_t;

/*!
 * \def DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_24HOUR_MODE
 * \brief Hour value.
*/
#define DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_24HOUR_MODE 35

/*!
 * \def DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_12HOUR_MODE
 * \brief Hour value.
*/
#define DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_12HOUR_MODE 274


/*!
 * \macro DS3231_ALARM_2_HOUR_HOUR_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_hour_t_hour type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_HOUR_HOUR_VALID(val) (\
  (val) == DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_24HOUR_MODE ||\
  (val) == DS3231_ALARM_2_HOUR_HOUR_HOUR_IN_12HOUR_MODE ||\
  0)

/*!
 * \def DS3231_ALARM_2_HOUR_AMPM_AM
 * \brief AM/PM bit in 12-hour mode.
*/
#define DS3231_ALARM_2_HOUR_AMPM_AM 0

/*!
 * \def DS3231_ALARM_2_HOUR_AMPM_PM
 * \brief AM/PM bit in 12-hour mode.
*/
#define DS3231_ALARM_2_HOUR_AMPM_PM 1


/*!
 * \macro DS3231_ALARM_2_HOUR_AMPM_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_hour_t_ampm type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_HOUR_AMPM_VALID(val) (\
  (val) == DS3231_ALARM_2_HOUR_AMPM_AM ||\
  (val) == DS3231_ALARM_2_HOUR_AMPM_PM ||\
  0)

/*!
 * \def DS3231_ALARM_2_HOUR_1224_24HOUR_MODE
 * \brief 12-hour or 24-hour mode select bit.
*/
#define DS3231_ALARM_2_HOUR_1224_24HOUR_MODE 0

/*!
 * \def DS3231_ALARM_2_HOUR_1224_12HOUR_MODE
 * \brief 12-hour or 24-hour mode select bit.
*/
#define DS3231_ALARM_2_HOUR_1224_12HOUR_MODE 1


/*!
 * \macro DS3231_ALARM_2_HOUR_1224_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_hour_t_1224 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_HOUR_1224_VALID(val) (\
  (val) == DS3231_ALARM_2_HOUR_1224_24HOUR_MODE ||\
  (val) == DS3231_ALARM_2_HOUR_1224_12HOUR_MODE ||\
  0)

/*!
 * \def DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MATCH
 * \brief Alarm 2 Mask bit 3.
*/
#define DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MATCH 0

/*!
 * \def DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MINUTES_AND_SECONDS_MATCH
 * \brief Alarm 2 Mask bit 3.
*/
#define DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MINUTES_AND_SECONDS_MATCH 1


/*!
 * \macro DS3231_ALARM_2_HOUR_A2M3_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_hour_t_a2m3 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_HOUR_A2M3_VALID(val) (\
  (val) == DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MATCH ||\
  (val) == DS3231_ALARM_2_HOUR_A2M3_ALARM_WHEN_HOURS_MINUTES_AND_SECONDS_MATCH ||\
  0)

/*!
 * \struct ds3231_alarm_2_daydate_t
 * \brief 
 *
 * \var 10_date Alarm 2 Day/Date value
 * \var dydt Day/Date select
 * \var a2m4 Alarm 2 Mask bit 4
 */
typedef struct {
  uint8_t _10_date:6;
  uint8_t dydt:1;
  uint8_t a2m4:1;
} ds3231_alarm_2_daydate_t;

/*!
 * \def DS3231_ALARM_2_DAYDATE_10_DATE_DAY_OF_THE_WEEK
 * \brief Alarm 2 Day/Date value.
*/
#define DS3231_ALARM_2_DAYDATE_10_DATE_DAY_OF_THE_WEEK 23

/*!
 * \def DS3231_ALARM_2_DAYDATE_10_DATE_DATE_OF_THE_MONTH
 * \brief Alarm 2 Day/Date value.
*/
#define DS3231_ALARM_2_DAYDATE_10_DATE_DATE_OF_THE_MONTH 305


/*!
 * \macro DS3231_ALARM_2_DAYDATE_10_DATE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_daydate_t_10_date type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_DAYDATE_10_DATE_VALID(val) (\
  (val) == DS3231_ALARM_2_DAYDATE_10_DATE_DAY_OF_THE_WEEK ||\
  (val) == DS3231_ALARM_2_DAYDATE_10_DATE_DATE_OF_THE_MONTH ||\
  0)

/*!
 * \def DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH
 * \brief Day/Date select.
*/
#define DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH 0

/*!
 * \def DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DATE_OF_THE_MONTH_MATCH
 * \brief Day/Date select.
*/
#define DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DATE_OF_THE_MONTH_MATCH 1


/*!
 * \macro DS3231_ALARM_2_DAYDATE_DYDT_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_daydate_t_dydt type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_DAYDATE_DYDT_VALID(val) (\
  (val) == DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DAY_OF_THE_WEEK_MATCH ||\
  (val) == DS3231_ALARM_2_DAYDATE_DYDT_ALARM_WHEN_DATE_OF_THE_MONTH_MATCH ||\
  0)

/*!
 * \def DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_MATCH
 * \brief Alarm 2 Mask bit 4.
*/
#define DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_MATCH 0

/*!
 * \def DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_DONT_CARE
 * \brief Alarm 2 Mask bit 4.
*/
#define DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_DONT_CARE 1


/*!
 * \macro DS3231_ALARM_2_DAYDATE_A2M4_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_alarm_2_daydate_t_a2m4 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_ALARM_2_DAYDATE_A2M4_VALID(val) (\
  (val) == DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_MATCH ||\
  (val) == DS3231_ALARM_2_DAYDATE_A2M4_ALARM_WHEN_DAYDATE_DONT_CARE ||\
  0)

/*!
 * \struct ds3231_control_t
 * \brief 
 *
 * \var a1ie Alarm 1 Interrupt Enable
 * \var a2ie Alarm 2 Interrupt Enable
 * \var intcn Interrupt Control
 * \var rs1 Rate Select
 * \var rs2 Rate Select
 * \var conv Convert Temperature
 * \var bbsqw Battery-Backed Square-Wave Enable
 * \var eosc Enable Oscillator
 */
typedef struct {
  uint8_t a1ie:1;
  uint8_t a2ie:1;
  uint8_t intcn:1;
  uint8_t rs1:1;
  uint8_t rs2:1;
  uint8_t conv:1;
  uint8_t bbsqw:1;
  uint8_t eosc:1;
} ds3231_control_t;

/*!
 * \def DS3231_CONTROL_A1IE_DISABLED
 * \brief Alarm 1 Interrupt Enable.
*/
#define DS3231_CONTROL_A1IE_DISABLED 0

/*!
 * \def DS3231_CONTROL_A1IE_ENABLED
 * \brief Alarm 1 Interrupt Enable.
*/
#define DS3231_CONTROL_A1IE_ENABLED 1


/*!
 * \macro DS3231_CONTROL_A1IE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_a1ie type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_A1IE_VALID(val) (\
  (val) == DS3231_CONTROL_A1IE_DISABLED ||\
  (val) == DS3231_CONTROL_A1IE_ENABLED ||\
  0)

/*!
 * \def DS3231_CONTROL_A2IE_DISABLED
 * \brief Alarm 2 Interrupt Enable.
*/
#define DS3231_CONTROL_A2IE_DISABLED 0

/*!
 * \def DS3231_CONTROL_A2IE_ENABLED
 * \brief Alarm 2 Interrupt Enable.
*/
#define DS3231_CONTROL_A2IE_ENABLED 1


/*!
 * \macro DS3231_CONTROL_A2IE_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_a2ie type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_A2IE_VALID(val) (\
  (val) == DS3231_CONTROL_A2IE_DISABLED ||\
  (val) == DS3231_CONTROL_A2IE_ENABLED ||\
  0)

/*!
 * \def DS3231_CONTROL_INTCN_SQUAREWAVE_OUTPUT
 * \brief Interrupt Control.
*/
#define DS3231_CONTROL_INTCN_SQUAREWAVE_OUTPUT 0

/*!
 * \def DS3231_CONTROL_INTCN_INTERRUPT_OUTPUT
 * \brief Interrupt Control.
*/
#define DS3231_CONTROL_INTCN_INTERRUPT_OUTPUT 1


/*!
 * \macro DS3231_CONTROL_INTCN_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_intcn type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_INTCN_VALID(val) (\
  (val) == DS3231_CONTROL_INTCN_SQUAREWAVE_OUTPUT ||\
  (val) == DS3231_CONTROL_INTCN_INTERRUPT_OUTPUT ||\
  0)

/*!
 * \def DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_0
 * \brief Rate Select.
*/
#define DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_0 0

/*!
 * \def DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_1
 * \brief Rate Select.
*/
#define DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_1 1


/*!
 * \macro DS3231_CONTROL_RS1_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_rs1 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_RS1_VALID(val) (\
  (val) == DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_0 ||\
  (val) == DS3231_CONTROL_RS1_SEE_RS2_FOR_FREQUENCY_1 ||\
  0)

/*!
 * \def DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_0
 * \brief Rate Select.
*/
#define DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_0 0

/*!
 * \def DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_1
 * \brief Rate Select.
*/
#define DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_1 1


/*!
 * \macro DS3231_CONTROL_RS2_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_rs2 type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_RS2_VALID(val) (\
  (val) == DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_0 ||\
  (val) == DS3231_CONTROL_RS2_SEE_RS1_FOR_FREQUENCY_1 ||\
  0)

/*!
 * \def DS3231_CONTROL_CONV_NO_CONVERSION
 * \brief Convert Temperature.
*/
#define DS3231_CONTROL_CONV_NO_CONVERSION 0

/*!
 * \def DS3231_CONTROL_CONV_START_CONVERSION
 * \brief Convert Temperature.
*/
#define DS3231_CONTROL_CONV_START_CONVERSION 1


/*!
 * \macro DS3231_CONTROL_CONV_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_conv type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_CONV_VALID(val) (\
  (val) == DS3231_CONTROL_CONV_NO_CONVERSION ||\
  (val) == DS3231_CONTROL_CONV_START_CONVERSION ||\
  0)

/*!
 * \def DS3231_CONTROL_BBSQW_DISABLED
 * \brief Battery-Backed Square-Wave Enable.
*/
#define DS3231_CONTROL_BBSQW_DISABLED 0

/*!
 * \def DS3231_CONTROL_BBSQW_ENABLED
 * \brief Battery-Backed Square-Wave Enable.
*/
#define DS3231_CONTROL_BBSQW_ENABLED 1


/*!
 * \macro DS3231_CONTROL_BBSQW_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_bbsqw type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_BBSQW_VALID(val) (\
  (val) == DS3231_CONTROL_BBSQW_DISABLED ||\
  (val) == DS3231_CONTROL_BBSQW_ENABLED ||\
  0)

/*!
 * \def DS3231_CONTROL_EOSC_OSCILLATOR_ENABLED
 * \brief Enable Oscillator.
*/
#define DS3231_CONTROL_EOSC_OSCILLATOR_ENABLED 0

/*!
 * \def DS3231_CONTROL_EOSC_OSCILLATOR_DISABLED
 * \brief Enable Oscillator.
*/
#define DS3231_CONTROL_EOSC_OSCILLATOR_DISABLED 1


/*!
 * \macro DS3231_CONTROL_EOSC_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_control_t_eosc type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_CONTROL_EOSC_VALID(val) (\
  (val) == DS3231_CONTROL_EOSC_OSCILLATOR_ENABLED ||\
  (val) == DS3231_CONTROL_EOSC_OSCILLATOR_DISABLED ||\
  0)

/*!
 * \struct ds3231_status_t
 * \brief 
 *
 * \var a1f Alarm 1 Flag. Indicates that the time matched the alarm 1 registers.
 * \var a2f Alarm 2 Flag. Indicates that the time matched the alarm 2 registers.
 * \var bsy Busy. Indicates the device is busy executing TCXO functions.
 * \var en32khz Enable 32kHz Output. Controls the status of the 32kHz pin.
 * \var reserved_4 Reserved field as space was unfilled
 * \var osf Oscillator Stop Flag. Indicates if the oscillator has stopped.
 */
typedef struct {
  uint8_t a1f:1;
  uint8_t a2f:1;
  uint8_t bsy:1;
  uint8_t en32khz:1;
  uint8_t reserved_4:3;
  uint8_t osf:1;
} ds3231_status_t;

/*!
 * \def DS3231_STATUS_A1F_NO_MATCH
 * \brief Alarm 1 Flag. Indicates that the time matched the alarm 1 registers.
*/
#define DS3231_STATUS_A1F_NO_MATCH 0

/*!
 * \def DS3231_STATUS_A1F_MATCH
 * \brief Alarm 1 Flag. Indicates that the time matched the alarm 1 registers.
*/
#define DS3231_STATUS_A1F_MATCH 1


/*!
 * \macro DS3231_STATUS_A1F_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_status_t_a1f type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_STATUS_A1F_VALID(val) (\
  (val) == DS3231_STATUS_A1F_NO_MATCH ||\
  (val) == DS3231_STATUS_A1F_MATCH ||\
  0)

/*!
 * \def DS3231_STATUS_A2F_NO_MATCH
 * \brief Alarm 2 Flag. Indicates that the time matched the alarm 2 registers.
*/
#define DS3231_STATUS_A2F_NO_MATCH 0

/*!
 * \def DS3231_STATUS_A2F_MATCH
 * \brief Alarm 2 Flag. Indicates that the time matched the alarm 2 registers.
*/
#define DS3231_STATUS_A2F_MATCH 1


/*!
 * \macro DS3231_STATUS_A2F_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_status_t_a2f type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_STATUS_A2F_VALID(val) (\
  (val) == DS3231_STATUS_A2F_NO_MATCH ||\
  (val) == DS3231_STATUS_A2F_MATCH ||\
  0)

/*!
 * \def DS3231_STATUS_BSY_NOT_BUSY
 * \brief Busy. Indicates the device is busy executing TCXO functions.
*/
#define DS3231_STATUS_BSY_NOT_BUSY 0

/*!
 * \def DS3231_STATUS_BSY_BUSY
 * \brief Busy. Indicates the device is busy executing TCXO functions.
*/
#define DS3231_STATUS_BSY_BUSY 1


/*!
 * \macro DS3231_STATUS_BSY_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_status_t_bsy type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_STATUS_BSY_VALID(val) (\
  (val) == DS3231_STATUS_BSY_NOT_BUSY ||\
  (val) == DS3231_STATUS_BSY_BUSY ||\
  0)

/*!
 * \def DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_DISABLED
 * \brief Enable 32kHz Output. Controls the status of the 32kHz pin.
*/
#define DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_DISABLED 0

/*!
 * \def DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_ENABLED
 * \brief Enable 32kHz Output. Controls the status of the 32kHz pin.
*/
#define DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_ENABLED 1


/*!
 * \macro DS3231_STATUS_EN32KHZ_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_status_t_en32khz type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_STATUS_EN32KHZ_VALID(val) (\
  (val) == DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_DISABLED ||\
  (val) == DS3231_STATUS_EN32KHZ_32KHZ_OUTPUT_ENABLED ||\
  0)

/*!
 * \def DS3231_STATUS_OSF_OSCILLATOR_IS_RUNNING
 * \brief Oscillator Stop Flag. Indicates if the oscillator has stopped.
*/
#define DS3231_STATUS_OSF_OSCILLATOR_IS_RUNNING 0

/*!
 * \def DS3231_STATUS_OSF_OSCILLATOR_HAS_STOPPED
 * \brief Oscillator Stop Flag. Indicates if the oscillator has stopped.
*/
#define DS3231_STATUS_OSF_OSCILLATOR_HAS_STOPPED 1


/*!
 * \macro DS3231_STATUS_OSF_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_status_t_osf type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_STATUS_OSF_VALID(val) (\
  (val) == DS3231_STATUS_OSF_OSCILLATOR_IS_RUNNING ||\
  (val) == DS3231_STATUS_OSF_OSCILLATOR_HAS_STOPPED ||\
  0)

/*!
 * \struct ds3231_aging_offset_t
 * \brief 
 *
 * \var data Data bits for the aging offset value.
 * \var sign Sign bit for the aging offset value.
 */
typedef struct {
  uint8_t data:7;
  uint8_t sign:1;
} ds3231_aging_offset_t;

/*!
 * \def DS3231_AGING_OFFSET_DATA_NO_AGING_OFFSET
 * \brief Data bits for the aging offset value.
*/
#define DS3231_AGING_OFFSET_DATA_NO_AGING_OFFSET 0

/*!
 * \def DS3231_AGING_OFFSET_DATA_1_LSB_POSITIVE_AGING_OFFSET
 * \brief Data bits for the aging offset value.
*/
#define DS3231_AGING_OFFSET_DATA_1_LSB_POSITIVE_AGING_OFFSET 1

/*!
 * \def DS3231_AGING_OFFSET_DATA_1_LSB_NEGATIVE_AGING_OFFSET
 * \brief Data bits for the aging offset value.
*/
#define DS3231_AGING_OFFSET_DATA_1_LSB_NEGATIVE_AGING_OFFSET 127


/*!
 * \macro DS3231_AGING_OFFSET_DATA_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_aging_offset_t_data type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_AGING_OFFSET_DATA_VALID(val) (\
  (val) == DS3231_AGING_OFFSET_DATA_NO_AGING_OFFSET ||\
  (val) == DS3231_AGING_OFFSET_DATA_1_LSB_POSITIVE_AGING_OFFSET ||\
  (val) == DS3231_AGING_OFFSET_DATA_1_LSB_NEGATIVE_AGING_OFFSET ||\
  0)

/*!
 * \def DS3231_AGING_OFFSET_SIGN_POSITIVE_AGING_OFFSET
 * \brief Sign bit for the aging offset value.
*/
#define DS3231_AGING_OFFSET_SIGN_POSITIVE_AGING_OFFSET 0

/*!
 * \def DS3231_AGING_OFFSET_SIGN_NEGATIVE_AGING_OFFSET
 * \brief Sign bit for the aging offset value.
*/
#define DS3231_AGING_OFFSET_SIGN_NEGATIVE_AGING_OFFSET 1


/*!
 * \macro DS3231_AGING_OFFSET_SIGN_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_aging_offset_t_sign type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_AGING_OFFSET_SIGN_VALID(val) (\
  (val) == DS3231_AGING_OFFSET_SIGN_POSITIVE_AGING_OFFSET ||\
  (val) == DS3231_AGING_OFFSET_SIGN_NEGATIVE_AGING_OFFSET ||\
  0)

/*!
 * \struct ds3231_msb_of_temp_t
 * \brief 
 *
 * \var data Integer portion of the temperature value
 * \var sign Sign bit of the temperature value
 */
typedef struct {
  uint8_t data:7;
  uint8_t sign:1;
} ds3231_msb_of_temp_t;

/*!
 * \def DS3231_MSB_OF_TEMP_SIGN_POSITIVE_TEMPERATURE
 * \brief Sign bit of the temperature value.
*/
#define DS3231_MSB_OF_TEMP_SIGN_POSITIVE_TEMPERATURE 0

/*!
 * \def DS3231_MSB_OF_TEMP_SIGN_NEGATIVE_TEMPERATURE
 * \brief Sign bit of the temperature value.
*/
#define DS3231_MSB_OF_TEMP_SIGN_NEGATIVE_TEMPERATURE 1


/*!
 * \macro DS3231_MSB_OF_TEMP_SIGN_VALID(val)
 * \brief Validates if a value matches any of the predefined valid values for ds3231_msb_of_temp_t_sign type.
 *
 * \param val The value to be validated.
 * \return True if the value matches any of the predefined valid values, false otherwise.
 */
 #define DS3231_MSB_OF_TEMP_SIGN_VALID(val) (\
  (val) == DS3231_MSB_OF_TEMP_SIGN_POSITIVE_TEMPERATURE ||\
  (val) == DS3231_MSB_OF_TEMP_SIGN_NEGATIVE_TEMPERATURE ||\
  0)

/*!
 * \typedef ds3231_lsb_of_temp_t
 * \brief Lower byte of the temperature data.
 */
typedef uint8_t ds3231_lsb_of_temp_t;

/*!
 * \def DS3231_LSB_OF_TEMP_DEFAULT
 * \brief Default value for ds3231_lsb_of_temp_t_t type.
 */
 #define DS3231_LSB_OF_TEMP_DEFAULT 0


#pragma pack(pop)
/*!
 * \def DS3231_WRITE_MESSAGE_MAX_SIZE
 * \brief Max buffer size required for write operations
 */
 #define DS3231_WRITE_MESSAGE_MAX_SIZE 2

/*!
 * \def DS3231_READ_MESSAGE_MAX_SIZE
 * \brief Max buffer size required for read operations
 */
#define DS3231_READ_MESSAGE_MAX_SIZE 2

/*!
 * \struct ds3231_data_t
 * \brief Staticaly allocated data used by the device for read/write operations.
 *
 * \var in_buf    staticaly allocated buffer for input data
 * \var out_buf   staticaly allocated buffer for out data
 */
 typedef struct {
     uint8_t out_buf[DS3231_WRITE_MESSAGE_MAX_SIZE];
     uint8_t in_buf[DS3231_READ_MESSAGE_MAX_SIZE];
 } ds3231_data_t;


/*!
 * \struct ds3231_api_t
 * \brief The device's API structure containing pointers to all device's API functions
 *
 * \var ds3231_write_reg contains pointer to ds3231_write_reg API's function
 * \var ds3231_read_reg contains pointer to ds3231_read_reg API's function

 */
typedef struct {
  EMBEDD_RESULT (*ds3231_write_reg)(embedd_device_t* dev, uint32_t reg_addr, void* data, uint32_t data_size, uint32_t delay);
  EMBEDD_RESULT (*ds3231_read_reg)(embedd_device_t* dev, uint32_t reg_addr, void* data, uint32_t data_size, uint32_t delay);
} ds3231_api_t;


#endif//_SRC_DS3231_DATA_TYPES_H
